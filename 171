// NOMBRE Y APELLIDOS: Juan Embid Sánchez y Daniel Fernández Ortiz Grupo 2ºE

#include <iostream>
#include <fstream>
using namespace std;

const int MAX_MONTANAS = 100000; // Constante que delimita el número máximo de montañas que puede tener una cordillera
const int MAX_ALTURAS = 100000; // Constante que delimita la altura máxima de las montañas

struct tAlturas { // Estructura que guarda la lista de montañas
    int alturas[MAX_ALTURAS];
    int cont = 0;
};

int contarAbadias(const tAlturas alturas) { // Función que recibe la lista de montañas y devuelve el número de abadías que se pueden contruir en esa cordillera
    int n_abadias = 0; // Variable que guarda el número de abadías que se pueden contruir en una cordillera
    int j = 0; // Variable con la que recorrer la cordillera
    bool mas_baja = true; // Variable que indica si una montaña es más baja que otra
    for (int i = alturas.cont; i > 0; i--) { // Bucle para recorrer todas las montañas
        j = i - 1;
        mas_baja = true;
        while ((j >= 0) && mas_baja) { // Bucle para comparar con todas las montañas a su derecha
            if (alturas.alturas[i] < alturas.alturas[j]) { // Si se da la condición para poder construir una abadía en la montaña de la posición i, se compara con la siguiente montaña (j)
                j--;
            }
            else { // Si no se cumple la condición, se pasa a comprobar la siguiente montaña (i)
                mas_baja = false;
            }
        }
        if (mas_baja) {
            n_abadias++;
        }
    }
    return n_abadias;
}

bool resuelveCaso() {
    tAlturas alturas; // Variable donde guardar la lista de montañas
    //Leer caso de prueba: cin>>...
    cin >> alturas.cont;
    if (alturas.cont == 0)
        return false;
    else if (alturas.cont <= MAX_MONTANAS) {
        for (int i = 0; i < alturas.cont; i++) { // Se leen las alturas de las montañas
            cin >> alturas.alturas[i];
        }
    }

    //Resolver problema
    //Escribir resultado
    cout << contarAbadias(alturas) << endl;
    return true;
}


int main() {

    // ajuste para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("in.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
    std::ofstream out("out.txt");
    auto coutbuf = std::cout.rdbuf(out.rdbuf());
#endif

    while (resuelveCaso());

    // restablecimiento de cin
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    std::cout.rdbuf(coutbuf);
    system("pause");
#endif
    return 0;
}

// 376 - Siete picos
#include <iostream>
#include <fstream>
using namespace std;

const int MAX_ALTURAS = 1000;

// O(n) donde n es el tamaño del array que guarda las alturas
int contarPicos(const int montana[], int alturas) {
    int picos = 0;
    // Se comprueba si hay picos en la primera y última posición del array
    if (((montana[0] > montana[1]) && (montana[0] > montana[alturas - 1])) || ((montana[alturas - 1] > montana[0]) && (montana[alturas - 1] > montana[alturas - 2]))) {
        picos++;
    }
    // Se comprueba el resto de casos
    for (int i = 1; i < alturas - 1; i++) {
        if ((montana[i] > montana[i - 1]) && (montana[i] > montana[i + 1])) {
            picos++;
        }
    }
    return picos;
}

bool resuelveCaso() {
    int alturas;
    int montana[MAX_ALTURAS] = {};
    //Leer caso de prueba: cin>>...
    cin >> alturas;
    if (alturas == 0)
        return false;
    else if ((alturas >= 2) && (alturas <= MAX_ALTURAS)) {
        for (int i = 0; i < alturas; i++) {
            cin >> montana[i];
        }
        cout << contarPicos(montana, alturas) << endl;
    }

    //Resolver problema
    //Escribir resultado
    return true;
}


int main() {

    // ajuste para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("in.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
    std::ofstream out("out.txt");
    auto coutbuf = std::cout.rdbuf(out.rdbuf());
#endif

    while (resuelveCaso());

    // restablecimiento de cin
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    std::cout.rdbuf(coutbuf);
    system("pause");
#endif
    return 0;
}
